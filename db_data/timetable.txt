----------------------------------------------------------
weekday:id | name | is_day_off (static 7 weekdays)

weekly_timetable: id | name | term | class_id | start time | end time | session_interval | break_interval

weekly_timetable_day:id | weekly_timetable_id | weekday_id

weekly_session: id | name | weekly_timetable_day_id | instructor_assignment_id | session_number | starting_time | ending_time 
----------------------------------------------------------
create weekly_timetable_day
take id and create weekly_session
----------------------------------------------------------
class screen >
get table by class id >>> (((WeeklyTimetableCubit.get(class id ))))
if not found create new one WeeklyTimetableCubit.add(class id )
(((WeeklyTimetableCubit.edit(class id))))

get days >>> (((WeekdaysCubit.getAll())))
select day
   get a WeeklyTimetableDay (((WeeklyTimetableDaysCubit.get(weekly_timetable_id , weekday_id))))
   check if the weekly_timetable_id | weekday_id are the same
   if false or not found:
   create a WeeklyTimetableDay (((WeeklyTimetableDaysCubit.create(weekly_timetable_id , weekday_id))))

   to delete: delete all related sessions then delete it
   (((WeeklySessionsCubit.deleteAll(weekly_timetable_day_id))))
   (((WeeklyTimetableDaysCubit.delete(weekly_timetable_id , weekday_id))))


     get the sessions (((WeeklySessionsCubit.getAll(class id ,weekday id ))))
     add a session (((WeeklySessionsCubit.create(sessionModel.toMap ))))
     edit a session (((WeeklySessionsCubit.edit(sessionModel.toMap ))))
     delete a session (((WeeklySessionsCubit.delete(sessionModel.id))))

----------------------------------------------------------

WeekdaysCubit
WeeklyTimetableCubit
WeeklySessionsCubit
WeeklyTimetableDaysCubit

 context.read<>().getAllItems();
 context.read<>().addItem();
 context.read<>().updateItem();
 context.read<>().deleteItem();

 // context.read<>(WeekdaysCubit).getAllItems();

 context.read<WeeklyTimetableCubit>().getByClassId(classId);
 context.read<WeeklyTimetableCubit>().addItem(model);
 context.read<WeeklyTimetableCubit>().updateItem(model.id);
 context.read<WeeklyTimetableCubit>().deleteItem(model.id);

 context.read<WeeklySessionsCubit>().getAllItems(class id ,weekday id);
 context.read<WeeklySessionsCubit>().addItem(model);
 context.read<WeeklySessionsCubit>().updateItem(model);
 context.read<WeeklySessionsCubit>().deleteItem(model.id);
 context.read<WeeklySessionsCubit>().deleteAll(weekly_timetable_day_id);


 context.read<WeeklyTimetableDaysCubit>().getItem(weekly_timetable_id , weekday_id);
 context.read<WeeklyTimetableDaysCubit>().addItem(weekly_timetable_id , weekday_id);
 context.read<WeeklyTimetableDaysCubit>().deleteItem(weekly_timetable_id , weekday_id);
----------------------------------------------------------
 
get the weekly_session table records that contains the  weekly_timetable_day record that contains the weekly_timetable record that contains the class_id = 1, and also contains weekday_id = 4'


select a class (now class_id is available)
create new timetable [timetable.toMap]
     >> new timetable record needs (name | term  | class_id | start time | end time | session_interval | break_interval)
to create table sessions
    select a weekday (now weekly_timetable_day_id is available) [weekday.toMap]
        give a value to is_day_off
        if false:
        for each day selected a weekly_timetable_day record will be created(weekly_timetable_id | weekday_id) [weekly_timetable_day.toMap]
            >> add sessions [session.toMap]
                select the instructor_assignment to this session (now instructor_assignment_id is available)
                session needs(name | weekly_timetable_day_id | instructor_assignment_id | session_number "current sessions number + 1")

----------------------------------------------------------

weekday(getAll)


weekly_timetable(
    create & update by id => form(name [field] | term [field]| class_id [select]| start time [time select]| end time [time select]| session_interval [num field] | break_interval [num field])
, getbyClassId , deletebyclassid)


weekly_timetable_day(
    create & update by id => select(weekly_timetable_id | weekday_id)
   , delete by (weekly_timetable(classid) | weekday_id))

weekly_session(
    create & update by id => (name field | weekly_timetable_day_id (select)| instructor_assignment_id(select) | session_number (current sessions number + 1)), 
    getAll by class id and weekday id , delete by id)